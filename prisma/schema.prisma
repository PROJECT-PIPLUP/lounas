// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Restaurant {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?
  address     String?
  website     String?

  dishes   Dish[]
  payments PaymentMethod[] //n-to-n, intersection table is created automatically
  tags     TagRestaurant[]

  RouteStep RouteStep[]
}

model Dish {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  description  String?
  price        Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String

  traits DishTraitScore[]
  tags   TagDish[]
  photos Photo[]

  visitHistory VisitHistory[] //obligatory syntax
}

model PaymentMethod {
  id          String       @id @default(uuid())
  name        String
  restaurants Restaurant[] //n-to-n, intersection table is created automatically
}

model Photo {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dish      Dish     @relation(fields: [dishId], references: [id])
  dishId    String
}

model VisitHistory {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dish   Dish   @relation(fields: [dishId], references: [id])
  dishId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  visitDate DateTime
}

model Trait {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dishScores DishTraitScore[] //obligatory syntax
}

model DishTraitScore {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dish    Dish   @relation(fields: [dishId], references: [id])
  dishId  String
  trait   Trait  @relation(fields: [traidId], references: [id])
  traidId String

  score Int
}

model RouteStep {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  previousStep RouteStep? @relation("RouteStepChain")
  nextStepId   String?    @unique
  nextStep     RouteStep? @relation("RouteStepChain", fields: [nextStepId], references: [id])
}

model TagRestaurant {
  id    String @id @default(uuid())
  label String

  restaurants Restaurant[]
}

model TagDish {
  id    String @id @default(uuid())
  label String

  dishes Dish[]
}

model User {
  id        String    @id @default(uuid())
  isStudent Boolean   @default(true)
  studentId Int?      @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLogin DateTime?

  visitHistory VisitHistory[]

  verifiedAuthMethods AuthMethodUserVerified[]
}

//email:isMemberOfDomain slack:isMemberOfWorkspace
model AuthMethod {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  SigninMethodUserVerified AuthMethodUserVerified[]
}

model AuthMethodUserVerified {
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt

  authMethod   AuthMethod @relation(fields: [authMethodId], references: [id])
  authMethodId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String

  isVerified Boolean @default(false)
}
